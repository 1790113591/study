1.【问答题】请编码实现动物世界的继承关系： 
	动物（Animal）具有行为（方法）：吃（eat）、睡觉（sleep） 
		【分析：定义一个Animal类，在其中定义两个函数（eat、sleep）】						
	动物包括：兔子（Rabbit），老虎（Tiger）
		【分析：定义两个Animal的子类，一个叫做Rabbit，一个叫做Tiger】
	这些动物吃的行为各不相同（兔子吃草，老虎吃肉）；但睡觉的行为是一致的。
		【分析：两个动物子类，重写父类的eat的方法（因为各不相同），sleep方法不用写出来，直接继承】	
	请通过继承实现以上需求。
		【分析：创建两个动物对象，一个兔子，一个老虎，调用各自的两个方法）
	

2.【问答题】请编码实现如下需求： 
	乐器（Instrument）分为：钢琴(Piano)、小提琴(Violin) 
	各种乐器的弹奏（ play ）方法各不相同。 
	【分析：3个类，乐器类是父类，钢琴和小提起是子类】
	【分析：父类中有一个play（演奏）的函数，里面打印“乐器在演奏”，子类各自重写play（演奏）方法】
	【分析：子类钢琴中重写play方法，打印“正在弹钢琴”；子类小提琴中重写play方法，打印“正在拉小提琴”】
	编写方法（函数，不是属于任何类）testPlay，对各种乐器进行弹奏测试。
	def testPlay(instr):
		print("\n正在进行乐器演奏测试")
		instr.play()		
	要依据乐器的不同，进行相应的弹奏。 
	【分析：创建两个乐器对象（一个是钢琴，一个是小提琴），将这两个对象作为参数，传入testPlay方法
	

3.【问答题】实现一个猜数字游戏，如下： 
	1）猜错的时候程序给予提示，告诉用户输入的值是大了还是小了； 
	2）每运行一次程序提供多次机会给用户猜测，而不是每运行一次程序只能猜一次； 
	3）猜的数字随机产生（可以通过导入random模块，使用该模块下的randint()方法来生成随机数，
		例如：x=random.randint(1,100)——x保存的就是一个1-100之间的随机数）
		
		
	运行效果：
	
	==================== 猜数字小游戏（1到100之间） ====================
	
	请输入一个数字：39
	太小了
	请输入一个数字：50
	太小了
	请输入一个数字：90
	太大了
	请输入一个数字：80
	太小了
	请输入一个数字：85
	太大了
	请输入一个数字：82
	恭喜你：猜对了！
	
	谢谢使用！